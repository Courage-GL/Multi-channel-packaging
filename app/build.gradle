apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.thunderdbot.myapplication"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("releasestore.jks")
            storePassword "haoleiandroid"
            keyAlias "haoleishequ"
            keyPassword "haoleiandroid"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 签名
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "env"
    productFlavors {
        web {}
        baidu {}
        c360 {}
        qq {}
        wandoujia {}
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
        }
    }
//    android.applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                //这里修改apk文件名
//                def fileName = "driver-${variant.baseName}-${variant.versionCode}-V${variant.versionName}.apk"
//                output.outputFile = new File(outputFile.parent, fileName)
//            }
//        }
//    }


    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            variant.productFlavors.each { flavor ->
                def project = "cpm"
                def separator = "_"
                def buildType = variant.variantData.variantConfiguration.buildType.name
                def versionName = variant.versionName
                def versionCode = variant.versionCode
                def date = new Date()
                def formattedDate = date.format('yyyyMMdd')

                def apkName =project + separator + "v" + versionName + separator + versionCode + separator + buildType + separator + flavor.name + ".apk"
                if (buildType == "release") {
                    apkName =project + separator + "v" + versionName + separator + versionCode + separator + buildType + separator + flavor.name + separator + formattedDate + ".apk"
                }

                output.outputFileName = apkName
            }
        }
    }

// /*   android.applicationVariants.all { variant ->
//        variant.outputs.all {
//            outputFileName = "myapplication-${variant.baseName}-${variant.versionCode}-V${variant.versionName}.apk"
//        }
//    }*/
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // 统一支持库使用 27.0.2 版本
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '27.0.2'
                }
            }

        }
    }

}
